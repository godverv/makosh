// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/makosh-be_api.proto

package makosh_be

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VersionMultiError, or nil if none found.
func (m *Version) ValidateAll() error {
	return m.validate(true)
}

func (m *Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionMultiError(errors)
	}

	return nil
}

// VersionMultiError is an error wrapping multiple validation errors returned
// by Version.ValidateAll() if the designated constraints aren't met.
type VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMultiError) AllErrors() []error { return m }

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

// Validate checks the field values on ListEndpoints with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListEndpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEndpoints with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListEndpointsMultiError, or
// nil if none found.
func (m *ListEndpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEndpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEndpointsMultiError(errors)
	}

	return nil
}

// ListEndpointsMultiError is an error wrapping multiple validation errors
// returned by ListEndpoints.ValidateAll() if the designated constraints
// aren't met.
type ListEndpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEndpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEndpointsMultiError) AllErrors() []error { return m }

// ListEndpointsValidationError is the validation error returned by
// ListEndpoints.Validate if the designated constraints aren't met.
type ListEndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndpointsValidationError) ErrorName() string { return "ListEndpointsValidationError" }

// Error satisfies the builtin error interface
func (e ListEndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndpointsValidationError{}

// Validate checks the field values on Endpoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointMultiError, or nil
// if none found.
func (m *Endpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return EndpointMultiError(errors)
	}

	return nil
}

// EndpointMultiError is an error wrapping multiple validation errors returned
// by Endpoint.ValidateAll() if the designated constraints aren't met.
type EndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointMultiError) AllErrors() []error { return m }

// EndpointValidationError is the validation error returned by
// Endpoint.Validate if the designated constraints aren't met.
type EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointValidationError) ErrorName() string { return "EndpointValidationError" }

// Error satisfies the builtin error interface
func (e EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointValidationError{}

// Validate checks the field values on UpsertEndpoints with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpsertEndpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertEndpoints with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertEndpointsMultiError, or nil if none found.
func (m *UpsertEndpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertEndpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertEndpointsMultiError(errors)
	}

	return nil
}

// UpsertEndpointsMultiError is an error wrapping multiple validation errors
// returned by UpsertEndpoints.ValidateAll() if the designated constraints
// aren't met.
type UpsertEndpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertEndpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertEndpointsMultiError) AllErrors() []error { return m }

// UpsertEndpointsValidationError is the validation error returned by
// UpsertEndpoints.Validate if the designated constraints aren't met.
type UpsertEndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEndpointsValidationError) ErrorName() string { return "UpsertEndpointsValidationError" }

// Error satisfies the builtin error interface
func (e UpsertEndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEndpointsValidationError{}

// Validate checks the field values on Version_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_RequestMultiError, or nil if none found.
func (m *Version_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Version_RequestMultiError(errors)
	}

	return nil
}

// Version_RequestMultiError is an error wrapping multiple validation errors
// returned by Version_Request.ValidateAll() if the designated constraints
// aren't met.
type Version_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_RequestMultiError) AllErrors() []error { return m }

// Version_RequestValidationError is the validation error returned by
// Version_Request.Validate if the designated constraints aren't met.
type Version_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_RequestValidationError) ErrorName() string { return "Version_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Version_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_RequestValidationError{}

// Validate checks the field values on Version_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_ResponseMultiError, or nil if none found.
func (m *Version_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return Version_ResponseMultiError(errors)
	}

	return nil
}

// Version_ResponseMultiError is an error wrapping multiple validation errors
// returned by Version_Response.ValidateAll() if the designated constraints
// aren't met.
type Version_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_ResponseMultiError) AllErrors() []error { return m }

// Version_ResponseValidationError is the validation error returned by
// Version_Response.Validate if the designated constraints aren't met.
type Version_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_ResponseValidationError) ErrorName() string { return "Version_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Version_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_ResponseValidationError{}

// Validate checks the field values on ListEndpoints_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEndpoints_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEndpoints_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEndpoints_RequestMultiError, or nil if none found.
func (m *ListEndpoints_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEndpoints_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return ListEndpoints_RequestMultiError(errors)
	}

	return nil
}

// ListEndpoints_RequestMultiError is an error wrapping multiple validation
// errors returned by ListEndpoints_Request.ValidateAll() if the designated
// constraints aren't met.
type ListEndpoints_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEndpoints_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEndpoints_RequestMultiError) AllErrors() []error { return m }

// ListEndpoints_RequestValidationError is the validation error returned by
// ListEndpoints_Request.Validate if the designated constraints aren't met.
type ListEndpoints_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndpoints_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndpoints_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndpoints_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndpoints_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndpoints_RequestValidationError) ErrorName() string {
	return "ListEndpoints_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndpoints_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndpoints_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndpoints_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndpoints_RequestValidationError{}

// Validate checks the field values on ListEndpoints_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEndpoints_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEndpoints_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEndpoints_ResponseMultiError, or nil if none found.
func (m *ListEndpoints_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEndpoints_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEndpoints_ResponseMultiError(errors)
	}

	return nil
}

// ListEndpoints_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListEndpoints_Response.ValidateAll() if the designated
// constraints aren't met.
type ListEndpoints_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEndpoints_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEndpoints_ResponseMultiError) AllErrors() []error { return m }

// ListEndpoints_ResponseValidationError is the validation error returned by
// ListEndpoints_Response.Validate if the designated constraints aren't met.
type ListEndpoints_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndpoints_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndpoints_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndpoints_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndpoints_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndpoints_ResponseValidationError) ErrorName() string {
	return "ListEndpoints_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndpoints_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndpoints_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndpoints_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndpoints_ResponseValidationError{}

// Validate checks the field values on UpsertEndpoints_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertEndpoints_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertEndpoints_Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertEndpoints_RequestMultiError, or nil if none found.
func (m *UpsertEndpoints_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertEndpoints_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertEndpoints_RequestValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertEndpoints_RequestValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertEndpoints_RequestValidationError{
					field:  fmt.Sprintf("Endpoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertEndpoints_RequestMultiError(errors)
	}

	return nil
}

// UpsertEndpoints_RequestMultiError is an error wrapping multiple validation
// errors returned by UpsertEndpoints_Request.ValidateAll() if the designated
// constraints aren't met.
type UpsertEndpoints_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertEndpoints_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertEndpoints_RequestMultiError) AllErrors() []error { return m }

// UpsertEndpoints_RequestValidationError is the validation error returned by
// UpsertEndpoints_Request.Validate if the designated constraints aren't met.
type UpsertEndpoints_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEndpoints_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEndpoints_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEndpoints_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEndpoints_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEndpoints_RequestValidationError) ErrorName() string {
	return "UpsertEndpoints_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEndpoints_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEndpoints_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEndpoints_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEndpoints_RequestValidationError{}

// Validate checks the field values on UpsertEndpoints_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertEndpoints_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertEndpoints_Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertEndpoints_ResponseMultiError, or nil if none found.
func (m *UpsertEndpoints_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertEndpoints_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertEndpoints_ResponseMultiError(errors)
	}

	return nil
}

// UpsertEndpoints_ResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertEndpoints_Response.ValidateAll() if the designated
// constraints aren't met.
type UpsertEndpoints_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertEndpoints_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertEndpoints_ResponseMultiError) AllErrors() []error { return m }

// UpsertEndpoints_ResponseValidationError is the validation error returned by
// UpsertEndpoints_Response.Validate if the designated constraints aren't met.
type UpsertEndpoints_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEndpoints_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEndpoints_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEndpoints_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEndpoints_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEndpoints_ResponseValidationError) ErrorName() string {
	return "UpsertEndpoints_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEndpoints_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEndpoints_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEndpoints_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEndpoints_ResponseValidationError{}
